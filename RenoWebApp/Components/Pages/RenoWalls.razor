@page "/RenoWalls"
@using RenoSystem;
@using System.IO;
@using System.Text.RegularExpressions;
@using Utils;


<h3>Reno Wall Collection</h3>

<!--Display feedback to the user-->
@if (FeedbackMessage != null)
{
    <div class="alert alert-danger">
        @FeedbackMessage
    </div>
}


<div class="container border">
    <section id="section-wall-details" class="m-auto d-flex justify-content-center">
        <fieldset>
            <legend>Wall Details</legend>
            <div>
                <label class="col-3" for="wall-planId">
                    Plan Id<span class="text-danger">*</span>
                </label>
                <input class="col-4" type="text" id="wall-planId" required @bind=PlanId />
            </div>
            <div>
                <label class="col-3" for="wall-width">
                    Width<span class="text-danger">*</span>
                </label>
                <input class="col-4" type="number" id="wall-width" required @bind=WallWidth />
            </div>
            <div>
                <label class="col-3" for="wall-height">
                    Height<span class="text-danger">*</span>
                </label>
                <input class="col-4" type="number" id="wall-height" required @bind=WallHeight/>
            </div>
            <div>
                <label class="col-3" for="wall-color">
                    Color<span class="text-danger">*</span>
                </label>
                <input class="col-4" type="text" id="wall-color" required @bind=WallColor/>
            </div>
        </fieldset>

        <fieldset class="">
            <legend>Opening (optional)</legend>
            <div>
                <label class="col-3" for="opening-type">
                    Opening Type<span class="text-danger">*</span>
                </label>
                <select class="col-4" id="opening-type" @bind=OpeningType>
                    <option selected disabled value="">Select Opening Type</option>
                    <option value="@OpeningType.Door">Door</option>
                    <option value="@OpeningType.Window">Window</option>
                    <option value="@OpeningType.Closet">Closet</option>
                    <option value="@OpeningType.Panel">Panel</option>
                </select>
            </div>
            <div>
                <label class="col-3" for="opening-width">
                    Width <span class="text-danger">*</span>
                </label>
                <input class="col-4" type="number" id="opening-width" required @bind=OpeningWidth/>
            </div>
            <div>
                <label class="col-3" for="opening-height">
                    Height<span class="text-danger">*</span>
                </label>
                <input class="col-4" type="number" id="opening-height" required @bind=OpeningHeight/>
            </div>
            <div>
                <label class="col-3" for="opening-edging">
                    Edging
                </label>
                <input class="col-4" type="text" id="opening-edging" required @bind=Edging/>
            </div>
        </fieldset>
    </section>
    <section id="menu-buttons" class="">
        <div>
            <button class="btn-primary" @onclick=SaveWallToFIle>Collect</button>
        </div>
        <div>
            <button class="btn-secondary" @onclick=ResetFields>Clear</button>
        </div>
        <div>
            <button class="btn-info">Report</button>
        </div>
    </section>
</div>


@code {
    private string? FeedbackMessage { get; set; }
    private Wall? NewWall { get; set; }
    private string? PlanId { get; set; }
    private int WallWidth { get; set; }
    private int WallHeight { get; set; }
    private string? WallColor { get; set; }   
    private Opening? WallOpening { get; set; }
    private int OpeningWidth { get; set; }
    private int OpeningHeight { get; set; }
    private OpeningType OpeningType { get; set; }
    private int Edging { get; set; }
    public Dictionary<string, string> ErrorList { get; set; } = new();

    [Inject]
    public IWebHostEnvironment WebHostEnvironment { get; set; } = default!;

    public void SaveWallToFIle()
    {
        string csvFilePath = $@"{WebHostEnvironment.ContentRootPath}\Data\TestData.csv";

        try
        {
            //Create the wall opening if data is provided
            WallOpening = new(OpeningWidth, OpeningHeight, OpeningType, Edging);
            //Create a new wall to append to the file
            NewWall = new(PlanId, WallWidth, WallHeight, WallColor, WallOpening);

            using (StreamWriter writter = new StreamWriter(csvFilePath, true))
            {
                writter.WriteLine(NewWall.ToString());
            }

            FeedbackMessage = "Data has been recorded";

        } catch(Exception ex)
        {
            FeedbackMessage = $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Reset all field values
    /// </summary>
    public void ResetFields()
    {
        PlanId = "";
        WallWidth = 0;
        WallHeight = 0;
        WallColor = "";
        OpeningWidth = 0;
        OpeningHeight = 0;
        Edging = 0;        
    }

    /// <summary>
    /// Validate user input
    /// </summary>
    public void ValidateFields()
    {
        //Validate PlanID format brd1_1X
        Regex planIdFormat = new Regex(@"^brd\d{1}_\d{1}[A-Z]$");

        if (String.IsNullOrWhiteSpace(PlanId))
        {
            ErrorList.Add("wall-planId", "Plan Id is required" );            
        }
        else if (!planIdFormat.IsMatch(PlanId))
        {
            ErrorList.Add("wall-planId", "Enter Plan Id in the format brd(room number)_1(A-Z for wall id)");

        }
    }
}
